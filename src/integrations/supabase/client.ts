
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://jpttfzjneoiehctwuzcb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpwdHRmempuZW9pZWhjdHd1emNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyODQxMDcsImV4cCI6MjA1OTg2MDEwN30.QwSi0BcsK_Fhch2upqrOfmeXVr11-_a9TT0w-ZWJFvA";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

/**
 * Cria um bucket no Supabase Storage caso não exista
 * @param bucketName Nome do bucket a ser criado
 * @param isPublic Se o bucket deve ser público
 * @param fileSizeLimit Limite de tamanho de arquivo em bytes (default: 100MB)
 */
export const setupBucket = async (
  bucketName: string, 
  isPublic: boolean = false, 
  fileSizeLimit: number = 100 * 1024 * 1024
): Promise<void> => {
  try {
    console.log(`Verificando bucket ${bucketName}...`);
    const { data, error } = await supabase.storage.getBucket(bucketName);
    
    if (error) {
      console.log(`Erro ao verificar bucket ${bucketName}:`, error.message);
      
      // Apenas tentar criar o bucket se realmente não existir
      if (error.message === 'The resource was not found') {
        console.log(`Tentando criar bucket ${bucketName}...`);
        try {
          const { error: createError } = await supabase.storage.createBucket(bucketName, {
            public: isPublic,
            fileSizeLimit: fileSizeLimit
          });
          
          if (createError) {
            console.error(`Erro ao criar bucket ${bucketName}:`, createError);
            return;
          }
          
          console.log(`Bucket ${bucketName} criado com sucesso`);
        } catch (createErr) {
          console.error(`Exceção ao criar bucket ${bucketName}:`, createErr);
        }
      }
    } else {
      console.log(`Bucket ${bucketName} já existe`);
    }
  } catch (error) {
    console.error(`Erro ao configurar bucket ${bucketName}:`, error);
  }
};

/**
 * Função para configurar o bucket de imagens do curso
 */
export const setupImageBucket = async (): Promise<void> => {
  await setupBucket('course-images', true, 5 * 1024 * 1024); // 5MB limit for images
};

/**
 * Função para configurar o bucket de vídeos do curso
 */
export const setupVideoBucket = async (): Promise<void> => {
  await setupBucket('course-videos', true, 100 * 1024 * 1024); // 100MB limit for videos
};

/**
 * Função para configurar o bucket de documentos do curso
 */
export const setupDocumentBucket = async (): Promise<void> => {
  await setupBucket('course-documents', true, 20 * 1024 * 1024); // 20MB limit for documents
};

/**
 * Configura todos os buckets necessários para a aplicação
 */
export const setupAllBuckets = async (): Promise<void> => {
  console.log('Configurando todos os buckets necessários...');
  await setupImageBucket();
  await setupVideoBucket();
  await setupDocumentBucket();
  console.log('Configuração de buckets concluída');
};

// Executar a configuração em desenvolvimento
if (import.meta.env.DEV) {
  console.log('Ambiente de desenvolvimento detectado, configurando buckets...');
  setupAllBuckets().catch(err => {
    console.error('Erro ao configurar buckets:', err);
  });
}
